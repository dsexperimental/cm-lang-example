@precedence {
  exprsup,
  exprterm,
  exprcont,
  sign @left,
  times @left,
  plus @left,

  block,

  if,
  else @left,
  repeat,
  while,
  for,
  in
}

@skip { spaces | Comment  }

expression {
   literal | UnaryExpr | BinaryExpr | ParenExpr | ControlExpr
}

literal { 
  Numeric | Integer | Logical | Complex
}

@top Script { newline* ( expression ~ifelse ( ";" | ";"? newline+ ) !exprterm )* ( expression? eof )  }


ParenExpr { 
  openParen newline* expression newline* closeParen
}


UnaryExpr {
  !sign ArithOp<"+"> newline* expression
}

BinaryExpr { 
    expression ~ifelse newline* !times ArithOp<"*"> newline* expression |
    expression ~ifelse newline* !plus ArithOp<"+"> newline* expression 
}

ArithOp<op> { op }
 

ifExpr { ifKwd newline* openParen newline* expression newline* closeParen !if newline* expression }

ifElseExpr[@dynamicPrecedence=1] { ifExpr ~ifelse newline* !exprsup elseKwd newline* !else expression }

ControlExpr {
  ifExpr | ifElseExpr
}


kw<term> { @specialize[@name={term}]<simpleName, term> }

ifKwd[@export] { kw<"if"> }
elseKwd { kw<"else"> }

@tokens {
  spaces[@export]  { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline[@export]  { $[\r\n\u2028\u2029] }
  eof { @eof }

  identifierChar { @asciiLetter }

  number {
    ( ( (@digit+ ( "." @digit* )? ) | ( "." @digit+ ) )  ( ("e" | "E") ("+" | "-")? @digit+ )? ) |
    ( ( "0x" | "0X" )( @digit | $[a-fA-F] )+ ( "."? ( @digit | $[a-fA-F] )* ("p" | "P") ("+" | "-")? @digit+ )? )
  }

  simpleName {
    ( identifierChar | "." ) ( ( identifierChar | "." | "_" ) ( identifierChar | @digit | "." | "_" )* )?
  }

  Logical { "TRUE" | "FALSE" }

  Numeric { number }

  Integer { number "L" }

  Complex { number "i" }

  @precedence {
    Logical,

    Complex,
    Integer,
    Numeric,
    simpleName
  }

  Comment { "#" ![\n]* }

  openParen[@export] { "(" }
  closeParen[@export] { ")" }

  "*"
  "+"

}



