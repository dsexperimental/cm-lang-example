@precedence {
  exprterm,
  exprcont,
  sign @left,
  times @left,
  plus @left
}

@skip { spaces | Comment  }

expression {
   literal | Identifier | UnaryExpr | BinaryExpr | ParenExpr 
}

literal { 
  Character | Numeric | Integer | Logical | Complex
}

Identifier { 
  simpleName | backtickName   
}


@top Script { newline* ( expression ( ";" | ";"? newline+ ) !exprterm )* ( expression? | eof )  }


ParenExpr { 
  openParen newline* expression ( () | newline+ ) closeParen
}


UnaryExpr {
  !sign ArithOp<"+"> newline* expression
}

BinaryExpr { 
    expression ( () | newline+ ) !times ArithOp<"*"> newline* expression |
    expression ( () | newline+ ) !plus ArithOp<"+"> newline* expression 
}

ArithOp<op> { op }

@tokens {
  spaces[@export]  { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline[@export]  { $[\r\n\u2028\u2029] }
  eof { @eof }
  identifierChar { @asciiLetter }

  simpleName {
    ( identifierChar | "." ) ( ( identifierChar | "." | "_" ) ( identifierChar | @digit | "." | "_" )* )?
  }

  backtickName { "`" ![\n]* "`" }

  Character {
    '"' ( ![\\\n"] | '\\' '"' )*  '"' |
    "'" ( ![\\\n'] | "\\" "'" )*  "'"
  }

  Logical { "TRUE" | "FALSE" }

  number {
    ( ( (@digit+ ( "." @digit* )? ) | ( "." @digit+ ) )  ( ("e" | "E") ("+" | "-")? @digit+ )? ) |
    ( ( "0x" | "0X" )( @digit | $[a-fA-F] )+ ( "."? ( @digit | $[a-fA-F] )* ("p" | "P") ("+" | "-")? @digit+ )? )
  }

  Numeric { number }

  Integer { number "L" }

  Complex { number "i" }

  infix0 { "%%" }
  infix1 { "%" ![%] "%" }
  infix2 { "%" ![%] ![%] "%" }
  infix3 { "%" ![%] ![%] ![%]  "%" }
  infix4 { "%" ![%] ![%] ![%] ![%] "%" }
  infix5 { "%" ![%] ![%] ![%] ![%] ![%] "%" }
  infix6 { "%" ![%] ![%] ![%] ![%] ![%] ![%] "%" }
  infix7 { "%" ![%] ![%] ![%] ![%] ![%] ![%] ![%] "%" }
  infix8 { "%" ![%] ![%] ![%] ![%] ![%] ![%] ![%] ![%] "%" }
  infix9 { "%" ![%] ![%] ![%] ![%] ![%] ![%] ![%] ![%] ![%] "%" }

  @precedence {
    infix0
    infix1,
    infix2,
    infix3,
    infix4,
    infix5,
    infix6,
    infix7,
    infix8,
    infix9,
    backtickName,
    Logical,
    Character,
    Complex,
    Integer,
    Numeric,
    simpleName
  }

  Comment { "#" ![\n]* }

  openParen[@export] { "(" }
  closeParen[@export] { ")" }

  "*"
  "+"

}



