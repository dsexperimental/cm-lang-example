@precedence {
  member @left,
  subset @left,
  funcall @left,
  exp @left,
  sign @right,
  seq @left,
  infix @left,
  times @left,
  plus @left,
  comp @left,
  not @left,
  and @left,
  or @left,
  frmla @left,
  rassign @left,
  lassign @right,
  eqassign @right,
  if,
  else @right,
  repeat,
  while,
  for,
  in,
  funbody,
  help,
  block
}

kw<term> { @specialize[@name={term}]<simpleName, term> }
commaSep<x> { "" | x ("," x)* }

ifKwd { kw<"if"> }
elseKwd { kw<"else"> }
repeatKwd { kw<"repeat"> }
whileKwd { kw<"while"> }
functionKwd { kw<"function"> }
forKwd { kw<"for"> }
inKwd { kw<"in"> }
nextKwd { kw<"next"> }
breakKwd { kw<"break"> }
trueKwd { kw<"TRUE"> }
falseKwd { kw<"FALSE"> }
nullKwd { kw<"NULL"> }
infKwd { kw<"Inf"> }
nanKwd { kw<"NaN"> }
naKwd { kw<"NA"> }
naintKwd { kw<"NA_integer_"> }
narealKwd { kw<"NA_real_"> }
nacomplexKwd { kw<"NA_complex_"> }
nacharKwd { kw<"NA_character_"> }

@skip { space | Comment }

@top Script { ( expression ";"? )* }

expression {
   literal | Identifier | call 
}

literal { 
  Character | Numeric | Integer | Logical | Complex 
}

Identifier { 
  simpleName | backtickName   
}

call {
  UnaryExpression | BinaryExpression | 
  Subset | Member | Formula |
  StdCall | FuncDef | 
  IfExpr | RepeatExpr | WhileExpr | ForExpr | 
  Block | ParenExpression
}

UnaryExpression {
  !sign ( "+" | "-" ) expression
  !not "!" expression
}

BinaryExpression { 
  expression !seq "::" expression |
  expression !seq ":" expression |
  expression !times ( "*" | "/" ) expression |
  expression !plus ( "+" | "-" ) expression |
  expression !exp "^" expression |
  expression !infix Infix expression |
  expression !comp ( "<" | ">" | ">=" | "<=" | "==" | "!=" ) expression |
  expression !and ( "&" | "&&" ) expression |
  expression !or ( "|" | "||" ) expression |
  expression !lassign ( "<-" | "<<-" ) expression |
  expression !rassign ( "->" | "->>" ) expression
}

Subset { expression !subset (( "$" Identifier) | ("[" commaSep<expression> "]" ) | ("[[" commaSep<expression> "]]" ) | ( "@" Identifier )) }

Member { Identifier !member ( "::" | ":::" ) Identifier }

Formula { expression? !frmla "~" expression}

ArgValue { (Identifier "=" )? expression }
ArgList { "(" commaSep<ArgValue> ")" }
StdCall { expression !funcall ArgList }

ParamValue { Identifier ("=" expression)? }
ParamList { "(" commaSep<ParamValue> ")" }
FuncDef { functionKwd ParamList !funbody expression }

IfExpr { ifKwd "(" expression ")" !if expression (!else elseKwd expression)? }

RepeatExpr { repeatKwd !repeat expression }
WhileExpr { whileKwd ParenExpression !while expression }
ForExpr { forKwd "(" Identifier  inKwd !in expression ")" !for expression }

Block { "{" !block  expression* "}" }

ParenExpression { "(" expression ")" }

Infix { infix0 | infix1 | infix2 | infix3 | infix4 | infix5 | infix6 | infix7| infix8| infix9 }

@tokens {
  space { @whitespace+ }

  simpleName {
    @asciiLetter+ |
    (@asciiLetter | "_")+ ( @asciiLetter | @digit | "." | "_")* |
    "." ( @asciiLetter | "_")? ( @asciiLetter | @digit | "." | "_")* |
    ".." ![0-9] ( @asciiLetter | @digit | "." | "_")* |
    "..." ( @asciiLetter | @digit | "." | "_")+ 
  }

  Character { 
    '"' (!["\\] | "\\" _)* '"' 
    "'" (!['\\] | '\\' _)* "'"
    }

  Logical { "TRUE" | "FALSE" }

  Numeric {
    @digit |
    @digit+ "."? @digit* (("e" | "E") ("+" | "-")? @digit+)? |
    @digit* "." @digit+ (("e" | "E") ("+" | "-")? @digit+)? |
    "0" $[xX] $[0-9a-fA-F]* ("." $[0-9a-fA-F]*)? $[pP] ("+" | "-")? @digit+
  }

  Integer {
    @digit+ "."? "L" |
    "0" $[xX] $[0-9a-fA-F]+ "L" |
    @digit+ (("e" | "E") ("+" | "-")? @digit+)? "L"
  }

  Complex {
    @digit+ "i" |
    @digit+ "."? @digit* (("e" | "E") ("+" | "-")? @digit+)? "i" |
    @digit* "." @digit+ (("e" | "E") ("+" | "-")? @digit+)? "i" |
    "0" $[xX] $[0-9a-fA-F]* ("." $[0-9a-fA-F]*)? $[pP] ("+" | "-")? @digit+ "i"
  }

  backtickName { "`" ![\n]* "`" }

  Comment { "#" ![\n]* }
  
  infix0 { "%%" }
  infix1 { "%" ![\s] "%" }
  infix2 { "%" ![\s] ![\s] "%" }
  infix3 { "%" ![\s] ![\s] ![\s]  "%" }
  infix4 { "%" ![\s] ![\s] ![\s] ![\s] "%" }
  infix5 { "%" ![\s] ![\s] ![\s] ![\s] ![\s]"%" }
  infix6 { "%" ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] "%" }
  infix7 { "%" ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] "%" }
  infix8 { "%" ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] "%" }
  infix9 { "%" ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] ![\s] "%" }

  ":"
  "::" ":::"
  "@"
  "*" "/"
  "+" "-"
  "^"
  "<" ">" ">=" "<=" "==" "!="
  "&" "&&" "|" "||"
  "<-" "<<-"
  "->" "->>"
  "$"
  "="
  "[" "]"
  "[[" "]]"

  @precedence {
    infix0
    infix1,
    infix2,
    infix3,
    infix4,
    infix5,
    infix6,
    infix7,
    infix8,
    infix9,
    backtickName,
    simpleName,
    Logical,
    Character,
    Complex,
    Numeric,
    Integer,
    ":::",
    "::",
    ":",
    "<<-",
    "<-",
    "->>",
    "->",
    "<=",
    ">=",
    "==",
    "<",
    ">",
    "=",
    "&&",
    "||",
    "&",
    "|",
    "[[",
    "]]",
    "[",
    "]"
  }
}
