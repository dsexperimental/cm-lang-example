@precedence {
  real @left,
  maybe @left,
  member @left,
  subset @left,
  funcall @left,
  exp @left,
  sign @right,
  seq @left,
  infix @left,
  times @left,
  plus @left,
  comp @left,
  not @left,
  and @left,
  or @left,
  frmla @left,
  rassign @left,
  lassign @right,
  eqassign @right,
  if,
  else @right,
  repeat,
  while,
  for,
  in,
  funbody,
  paren,
  help,
  block
}

kw<term> { @specialize[@name={term}]<simpleName, term> }
commaSep<x> { "" | x ("," x)* }

ifKwd { kw<"if"> }
elseKwd { kw<"else"> }
repeatKwd { kw<"repeat"> }
whileKwd { kw<"while"> }
functionKwd { kw<"function"> }
forKwd { kw<"for"> }
inKwd { kw<"in"> }
nextKwd { kw<"next"> }
breakKwd { kw<"break"> }
trueKwd { kw<"TRUE"> }
falseKwd { kw<"FALSE"> }
nullKwd { kw<"NULL"> }
infKwd { kw<"Inf"> }
nanKwd { kw<"NaN"> }
naKwd { kw<"NA"> }
naintKwd { kw<"NA_integer_"> }
narealKwd { kw<"NA_real_"> }
nacomplexKwd { kw<"NA_complex_"> }
nacharKwd { kw<"NA_character_"> }

@skip { spaces | Comment }

@top Script { ( expression !real exprDelim | newline )* }

Block { "{" ( !block expression !real exprDelim | newline )* "}" }

exprDelim { ";" | newline | eof }

expression {
   literal | Identifier | call
}

nlsok { !maybe newline* }

literal { 
  Character | Numeric | Integer | Logical | Complex
}

Identifier { 
  simpleName | backtickName   
}

call {
    UnaryExpression | BinaryExpression | 
    Subset | Member | Formula |
    StdCall | FuncDef | 
    IfExpr | RepeatExpr | WhileExpr | ForExpr | 
    Block | ParenExpression
}

UnaryExpression {
  ( 
    !sign ( "+" | "-" ) | 
    !not "!"  
  )
  nlsok expression
}

BinaryExpression { 
  expression (
    !seq ":" |
    !times ( "*" | "/" ) |
    !plus ( "+" | "-" ) |
    !exp "^" |
    !infix Infix |
    !comp ( "<" | ">" | ">=" | "<=" | "==" | "!=" ) |
    !and ( "&" | "&&" ) |
    !or ( "|" | "||" ) |
    !lassign ( "<-" | "<<-" ) |
    !rassign ( "->" | "->>" ) 
  )
  nlsok expression 
}

Subset { 
  expression !subset 
  ( 
    ( "$" nlsok Identifier) |
    ( "[" nlsok expression ( nlsok "," nlsok expression)* nlsok "]" ) |
    ( "[[" nlsok expression ( nlsok "," nlsok expression)* nlsok "]]" ) |
    ( "@" nlsok Identifier ) 
  )
}

Member { Identifier !member ( "::" | ":::" ) nlsok Identifier }

Formula { expression? !frmla "~" nlsok expression }

ArgValue { (Identifier "=" )? expression }
ArgList { "(" commaSep<ArgValue>  ")" }
StdCall { expression !funcall ArgList }

ParamValue { Identifier ( "="  expression)? }
ParamList { "("  commaSep<ParamValue>  ")" }
FuncDef { functionKwd  ParamList  !funbody expression }

IfExpr { ifKwd nlsok "(" nlsok expression  nlsok ")" nlsok !if expression ( !else elseKwd nlsok expression)? } 

RepeatExpr { repeatKwd nlsok !repeat expression }
WhileExpr { whileKwd nlsok "(" nlsok expression nlsok ")" nlsok !while expression }
ForExpr { forKwd nlsok "(" nlsok Identifier nlsok inKwd nlsok !in expression nlsok ")" nlsok !for expression }

ParenExpression { !paren "(" nlsok expression nlsok ")" }

Infix { infix0 | infix1 | infix2 | infix3 | infix4 | infix5 | infix6 | infix7| infix8 | infix9 }

@tokens {
  spaces[@export]  { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline[@export]  { $[\r\n\u2028\u2029] }
  eof { @eof }
  identifierChar { @asciiLetter }

  @precedence { spaces, newline, identifierChar }

  simpleName {
    ( identifierChar | "." ) ( ( identifierChar | "." | "_" ) ( identifierChar | @digit | "." | "_" )* )?
  }

  Character {
    '"' ( ![\\\n"] | '\\' '"' )*  '"' |
    "'" ( ![\\\n'] | "\\" "'" )*  "'"
  }

  Logical { "TRUE" | "FALSE" }

  number {
    ( ( (@digit+ ( "." @digit* )? ) | ( "." @digit+ ) )  ( ("e" | "E") ("+" | "-")? @digit+ )? ) |
    ( ( "0x" | "0X" )( @digit | $[a-fA-F] )+ ( "."? ( @digit | $[a-fA-F] )* ("p" | "P") ("+" | "-")? @digit+ )? )
  }

  Numeric { number }

  Integer { number "L" }

  Complex { number "i" }

  backtickName { "`" ![\n]* "`" }

  Comment { "#" ![\n]* }
  
  infix0 { "%%" }
  infix1 { "%" ![%] "%" }
  infix2 { "%" ![%] ![%] "%" }
  infix3 { "%" ![%] ![%] ![%]  "%" }
  infix4 { "%" ![%] ![%] ![%] ![%] "%" }
  infix5 { "%" ![%] ![%] ![%] ![%] ![%] "%" }
  infix6 { "%" ![%] ![%] ![%] ![%] ![%] ![%] "%" }
  infix7 { "%" ![%] ![%] ![%] ![%] ![%] ![%] ![%] "%" }
  infix8 { "%" ![%] ![%] ![%] ![%] ![%] ![%] ![%] ![%] "%" }
  infix9 { "%" ![%] ![%] ![%] ![%] ![%] ![%] ![%] ![%] ![%] "%" }

  ":"
  "::" ":::"
  "@"
  "*" "/"
  "+" "-"
  "^"
  "<" ">" ">=" "<=" "==" "!="
  "&" "&&" "|" "||"
  "<-" "<<-"
  "->" "->>"
  "$"
  "="
  "[" "]"
  "[[" "]]"

  @precedence {
    infix0
    infix1,
    infix2,
    infix3,
    infix4,
    infix5,
    infix6,
    infix7,
    infix8,
    infix9,
    backtickName,
    Logical,
    Character,
    Complex,
    Integer,
    Numeric,
    simpleName,
    ":::",
    "::",
    ":",
    "<<-",
    "<-",
    "->>",
    "->",
    "<=",
    ">=",
    "==",
    "<",
    ">",
    "=",
    "&&",
    "||",
    "&",
    "|",
    "[[",
    "]]",
    "[",
    "]"
  }
}

