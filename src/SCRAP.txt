dotsKwd { kw<"..."> }
dots1Kwd { kw<"..1"> }
dots2Kwd { kw<"..2"> }
dots3Kwd { kw<"..3"> }
dots4Kwd { kw<"..4"> }
dots5Kwd { kw<"..5"> }
dots6Kwd { kw<"..6"> }
dots7Kwd { kw<"..7"> }
dots8Kwd { kw<"..8"> }
dots9Kwd { kw<"..9"> }
DotNum { dots1Kwd | dots2Kwd |  dots3Kwd | dots4Kwd | dots5Kwd | dots6Kwd | dots7Kwd | dots8Kwd | dots9Kwd }

@top Script { expression* }

@skip { space | newLine | LineComment }

@precedence {
  Assignment @right
}

expression {
  literal |
  symbol |
  call |
  Block { "{" expression* "}" }
}

@tokens {
  space { @whitespace+ }

  Identifier {
    @asciiLetter+ |
    (@asciiLetter | "_")+ ( @asciiLetter | @digit | "." | "_")* |
    "." ( @asciiLetter | "_")? ( @asciiLetter | @digit | "." | "_")* |
    ".." ![0-9] ( @asciiLetter | @digit | "." | "_")* |
    "..." ( @asciiLetter | @digit | "." | "_")+ |
  }

  String { 
    '"' (!["\\] | "\\" _)* '"' 
    "'" (!['\\] | '\\' _)* "'"
    }

  Boolean { "TRUE" | "FALSE" }

  Numeric {
    @digit |
    @digit+ "."? @digit* (("e" | "E") ("+" | "-")? @digit+)? |
    @digit* "." @digit+ (("e" | "E") ("+" | "-")? @digit+)? |
    "0" $[xX] $[0-9a-fA-F]* ("." $[0-9a-fA-F]*)? $[pP] ("+" | "-")? @digit+
  }

  Integer {
    @digit+ "."? "L" |
    "0" $[xX] $[0-9a-fA-F]+ "L" |
    @digit+ (("e" | "E") ("+" | "-")? @digit+)? "L"
  }

  Complex {
    @digit+ "i" |
    @digit+ "."? @digit* (("e" | "E") ("+" | "-")? @digit+)? "i" |
    @digit* "." @digit+ (("e" | "E") ("+" | "-")? @digit+)? "i" |
    "0" $[xX] $[0-9a-fA-F]* ("." $[0-9a-fA-F]*)? $[pP] ("+" | "-")? @digit+ "i"
  }

  LineComment { "#" ![\n]* }

  "(" ")"

  "<-" [@name=AssignOp,@export]

  @precedence { space newline AssignOp}
}

literal { String | Boolean | Numeric | Complex | Integer }

operator { AssignOp }

symbol { Identifier | operator }

Assignment { expression "<-" expression }
StdCall { Symbol ArgList}
FunctionDef { "function" ParamList expression}

call {
  Assignment | StdCall | FunctionDef
}

kw<term> { @specialize[@name={term}]<Symbol, term> }

commaSep<x> { "" | x ("," x)* }

ParamList { "(" commaSep< ((Identifier "=" )? expression)* > ")" }

ArgList { "(" commaSep< ((Identifier "=" )? expression)* > ")" }

@detectDelim
